<?php
return array (
    'package' => 'HipChat',
    'tagline' => 'Build bots or slash commands for this enterprise chat app.',
    'description' => 'Connect to the HipChat Enterprise Messaging API to build bots or slash commands for this enterprise chat app. Test an API call and export the code snippet.',
    'image' => 'https://logo.clearbit.com/hipchat.com?s=128',
    'repo' => 'https://github.com/RapidSoftwareSolutions/Marketplace-HipChat-Package',
    'keywords' => array (
        'API', 'Group chat', 'video chat', 'screen sharing', 'chat', 'HipChat',
    ),
    'accounts' => array (
        'domain' => 'hipchat.com',
        'credentials' => array (),
    ),
    'blocks' => array (
        array (
            'name' => 'getAccessToken',
            'description' => 'Gets an OAuth token for requested grant type.',
            'args' => array (
                array (
                    'name' => 'code',
                    'type' => 'String',
                    'info' => 'The authorization code to exchange for an access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userId',
                    'type' => 'String',
                    'info' => 'The id of the user the token is acting on behalf of.',
                    'required' => true,
                ),
                array (
                    'name' => 'clientName',
                    'type' => 'String',
                    'info' => 'The name of the public oauth client retrieving a token for.',
                    'required' => true,
                ),
                array (
                    'name' => 'redirectUri',
                    'type' => 'String',
                    'info' => 'The URL that was used to generate an authorization code, and it must match that value.',
                    'required' => true,
                ),
                array (
                    'name' => 'scope',
                    'type' => 'String',
                    'info' => 'A space-delimited list of scopes that is requested.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The name of the group to which the related user belongs.',
                    'required' => true,
                ),
            ),
        ),

        array (
            'name' => 'getCapabilities',
            'description' => 'Gets the capabilities descriptor.',
            'args' => array (),
        ),
        array (
            'name' => 'getAddonCapabilitiesSchema',
            'description' => 'Gets the addon capabilities descriptor schema.',
            'args' => array (
                array (
                    'name' => 'draft',
                    'type' => 'String',
                    'info' => 'The json schema draft version to use. One of: v2, v4.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getEmoticon',
            'description' => 'Get emoticon details.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'emoticonIdOrKey',
                    'type' => 'String',
                    'info' => 'The id or shortcut of the emoticon.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getAllEmoticons',
            'description' => 'Gets all emoticons for the current group.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results.',
                    'required' => false,
                ),
                array (
                    'name' => 'type',
                    'type' => 'String',
                    'info' => 'The type of emoticons to get. One of: global, group, all.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalAction',
            'description' => 'Retrieve a global action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalAction',
            'description' => 'Create a global action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'targetOptions',
                    'type' => 'JSON',
                    'info' => 'JSON Object containing options which vary based on the type of target.',
                    'required' => false,
                ),
                array (
                    'name' => 'targetKey',
                    'type' => 'String',
                    'info' => 'The key of a dialog glance or web panel that should be opened in response to this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which the action appears in menu or list.',
                    'required' => false,
                ),
                array (
                    'name' => 'location',
                    'type' => 'String',
                    'info' => 'The location of this action. One of: hipchat.message.action, hipchat.input.action.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this action is shown A mixed array of the following types.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalAction',
            'description' => 'Delete a global action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalDialog',
            'description' => 'Retrieve a global dialog.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalDialog',
            'description' => 'Create a global dialog.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The url where the dialog content is hosted.',
                    'required' => true,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this dialog. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsStyle',
                    'type' => 'String',
                    'info' => 'The dialog style. One of: normal, warning.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsHintI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsHintValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsFilterPlaceholderI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsFilterPlaceholderValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsPrimaryActionEnabled',
                    'type' => 'Boolean',
                    'info' => 'Whether button is disabled or enabled.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsPrimaryActionNameI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsPrimaryActionNameValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsPrimaryActionKey',
                    'type' => 'String',
                    'info' => 'A key that can be used to register an event listener.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsSecondaryActions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of secondary actions of the dialog rendered as link buttons.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsSizeWidth',
                    'type' => 'String',
                    'info' => 'The width of the dialog either in pixels px or as a percentage.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsSizeHeight',
                    'type' => 'String',
                    'info' => 'The height of the dialog either in pixels px or as a percentage.',
                    'required' => true,
                ),
                array (
                    'name' => 'titleI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'titleValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalDialog',
            'description' => 'Delete a global.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalExternalPage',
            'description' => 'Retrieve a global external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalExternalPage',
            'description' => 'Create a global external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL of the external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The default text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalExternalPage',
            'description' => 'Delete a global external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalGlance',
            'description' => 'Retrieve a global glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalGlance',
            'description' => 'Create a global glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'targetOptions',
                    'type' => 'JSON',
                    'info' => 'JSON Object containing options which vary based on the type of target.',
                    'required' => false,
                ),
                array (
                    'name' => 'targetKey',
                    'type' => 'String',
                    'info' => 'The key of a dialog glance or web panel that should be opened in response to this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which glances appear Glances are displayed top to bottom in order of ascending weight.',
                    'required' => false,
                ),
                array (
                    'name' => 'queryUrl',
                    'type' => 'String',
                    'info' => 'The URL of the resource providing the glance content.',
                    'required' => false,
                ),
                array (
                    'name' => 'iconUrl',
                    'type' => 'String',
                    'info' => 'Url for the icon.',
                    'required' => true,
                ),
                array (
                    'name' => 'iconUrl2x',
                    'type' => 'String',
                    'info' => 'Url for the retina version of the icon.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this glance is shown.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The display name of the glance text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalGlance',
            'description' => 'Delete a global glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalWebPanel',
            'description' => 'Retrieve a global web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalWebPanel',
            'description' => 'Create a global web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'Localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The display name of the webPanel.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which webPanel appear.',
                    'required' => false,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL of the resource providing the view content.',
                    'required' => true,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this webpanel. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'location',
                    'type' => 'String',
                    'info' => 'The location of this webPanel. One of: hipchat, sidebar, right.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this web panel is shown.',
                    'required' => false,
                ),
                array (
                    'name' => 'iconUrl',
                    'type' => 'String',
                    'info' => 'Url for the icon to display on the left side of the webPanel title.',
                    'required' => true,
                ),
                array (
                    'name' => 'iconUrl2x',
                    'type' => 'String',
                    'info' => 'Url for the retina version of the icon to display on the left side of the webPanel title.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalWebPanel',
            'description' => 'Delete a global web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGlobalWebhook',
            'description' => 'Retrieve a global webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createGlobalWebhook',
            'description' => 'Create a global webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'The label for this webhook.',
                    'required' => false,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL to send the webhook POST to.',
                    'required' => true,
                ),
                array (
                    'name' => 'pattern',
                    'type' => 'String',
                    'info' => 'The regular expression pattern to match against messages.',
                    'required' => false,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this webhook. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => false,
                ),
                array (
                    'name' => 'event',
                    'type' => 'String',
                    'info' => 'The event to listen for. One of: room_archived, room_created, room_deleted, room_enter, room_exit, room_file_upload, room_message, room_notification, room_topic_change, room_unarchived.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGlobalWebhook',
            'description' => 'Delete a global webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGroup',
            'description' => 'Get a group\'s details.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The id of the group to view.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGroupAvatar',
            'description' => 'Gets a group avatar.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The id of the group.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateGroupAvatar',
            'description' => 'Update a group avatar.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The id of the group.',
                    'required' => true,
                ),
                array (
                    'name' => 'avatar',
                    'type' => 'File',
                    'info' => 'The group avatar.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteGroupAvatar',
            'description' => 'Delete group avatar.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The id of the group.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getGroupStatistics',
            'description' => 'Get a group\'s details.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'groupId',
                    'type' => 'String',
                    'info' => 'The id of the group to view.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getIntegrationInstallableData',
            'description' => 'Get integration installable data This resource is only useful for integration installations that provide the integration with the installable data URL. Will be deleted after first access.',
            'args' => array (
                array (
                    'name' => 'token',
                    'type' => 'Number',
                    'info' => 'The one time use token for accessing installable information.',
                    'required' => true,
                ),
                array (
                    'name' => 'integrationIdOrKey',
                    'type' => 'Number',
                    'info' => 'The id or key of the integration.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'invokeIntegrationLink',
            'description' => 'Access an integration link.',
            'args' => array (
                array (
                    'name' => 'token',
                    'type' => 'String',
                    'info' => 'The allocated token of the link to be accessed.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteIntegrationLink',
            'description' => 'Delete a link endpoint by its token.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'token',
                    'type' => 'String',
                    'info' => 'The allocated token returned when the link was created.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createIntegrationLink',
            'description' => 'Create a link target through which an integration can be reached through HipChat. A token will be returned which is used to access the link.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'target',
                    'type' => 'String',
                    'info' => 'The address of the endpoint which will be invoked when the link is accessed.',
                    'required' => true,
                ),
                array (
                    'name' => 'ttl',
                    'type' => 'Number',
                    'info' => 'The lifetime of the link token.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'pushUIChangesToGroup',
            'description' => 'Push addon ui update to a group.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'glance',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of glances to update.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'pushUIChangesToRoom',
            'description' => 'Push addon ui update to a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'Number',
                    'info' => 'The id or url encoded name of the room to push the ui updates.',
                    'required' => true,
                ),
                array (
                    'name' => 'glance',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of glances to update.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'pushUIChangesToUserInRoom',
            'description' => 'Push addon ui update to a single user in a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userIdOrEmail',
                    'type' => 'Number',
                    'info' => 'The id or email of the user to push the ui updates.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'Number',
                    'info' => 'The id or url encoded name of the room to push the ui updates.',
                    'required' => true,
                ),
                array (
                    'name' => 'glance',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of glances to update.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'pushUIChangesToUser',
            'description' => 'Push addon ui update to a user.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userIdOrName',
                    'type' => 'Number',
                    'info' => 'The id or name of the user to push the ui updates.',
                    'required' => true,
                ),
                array (
                    'name' => 'glance',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of glances to update.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'inviteUserToGroup',
            'description' => 'Invites a user to join a group.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'title',
                    'type' => 'String',
                    'info' => 'The invited user\'s title.',
                    'required' => false,
                ),
                array (
                    'name' => 'email',
                    'type' => 'String',
                    'info' => 'Email to sent the invite to.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'The invited user\'s full name.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getAutoJoinRooms',
            'description' => 'Get the list of rooms a user joins when they log in.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to retrieve rooms.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getAllUsers',
            'description' => 'List all users in the group.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeGuests',
                    'type' => 'Boolean',
                    'info' => 'Include active guest users in response.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include deleted users in response.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'createUser',
            'description' => 'Creates a new user.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'User\'s full name.',
                    'required' => true,
                ),
                array (
                    'name' => 'roles',
                    'type' => 'Array',
                    'info' => 'Array of Strings, of list, of roles for the user.',
                    'required' => false,
                ),
                array (
                    'name' => 'title',
                    'type' => 'String',
                    'info' => 'User\'s title.',
                    'required' => false,
                ),
                array (
                    'name' => 'mentionName',
                    'type' => 'String',
                    'info' => 'User\'s @mention name.',
                    'required' => false,
                ),
                array (
                    'name' => 'isGroupAdmin',
                    'type' => 'Boolean',
                    'info' => 'Whether or not this user is an admin.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'User\'s timezone Must be a supported timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'password',
                    'type' => 'String',
                    'info' => 'User\'s password.',
                    'required' => false,
                ),
                array (
                    'name' => 'email',
                    'type' => 'String',
                    'info' => 'User\'s email.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getUser',
            'description' => 'Get a user\'s details.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to view.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateUser',
            'description' => 'Update a user. A guest cannot be updated.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id email address or mention name (beginning with an @) of the user to update.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'User\'s full name.',
                    'required' => true,
                ),
                array (
                    'name' => 'roles',
                    'type' => 'String',
                    'info' => 'Comma-separated list of roles for the user.',
                    'required' => false,
                ),
                array (
                    'name' => 'title',
                    'type' => 'String',
                    'info' => 'User\'s title.',
                    'required' => false,
                ),
                array (
                    'name' => 'presenceStatus',
                    'type' => 'String',
                    'info' => 'Presence status message of the user.',
                    'required' => false,
                ),
                array (
                    'name' => 'presenceShow',
                    'type' => 'String',
                    'info' => 'Presence status to show for the user.',
                    'required' => true,
                ),
                array (
                    'name' => 'mentionName',
                    'type' => 'String',
                    'info' => 'User\'s mention name.',
                    'required' => true,
                ),
                array (
                    'name' => 'isGroupAdmin',
                    'type' => 'Boolean',
                    'info' => 'Whether or not this user is an admin.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'User\'s timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'password',
                    'type' => 'String',
                    'info' => 'User\'s password.',
                    'required' => false,
                ),
                array (
                    'name' => 'email',
                    'type' => 'String',
                    'info' => 'User\'s email.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteUser',
            'description' => 'Delete a user.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to delete.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getPrivatechatMessage',
            'description' => 'Fetch one specific message by id.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'messageId',
                    'type' => 'String',
                    'info' => 'The id of the message to retrieve.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone. Must be a supported timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getPrivatechatHistory',
            'description' => 'Fetch chat history for the 1:1 chat with the user identified by id or email.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id or email of the user.',
                    'required' => true,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of messages to return. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'reverse',
                    'type' => 'Boolean',
                    'info' => 'Reverse the output such that the oldest message is first.',
                    'required' => false,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The offset for the messages to return.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
                array (
                    'name' => 'date',
                    'type' => 'String',
                    'info' => 'Either the latest date to fetch history for in ISO-8601 format, or \'recent\' to fetch the latest 75 messages.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone. Must be a supported timezone name, please see wikipedia TZ database page.',
                    'required' => false,
                ),
                array (
                    'name' => 'endDate',
                    'type' => 'String',
                    'info' => 'Either the earliest date to fetch history for in ISO-8601 format, or \'null\' to disable this filter.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getRecentPrivatechatHistory',
            'description' => 'Fetch latest chat history for the 1:1 chat with the user identified by id or email.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id or email of the user.',
                    'required' => true,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of messages to return. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone. Must be a supported timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
                array (
                    'name' => 'notBefore',
                    'type' => 'String',
                    'info' => 'The id of the message that is oldest in the set of messages to be returned.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'sendPrivateMessage',
            'description' => 'Sends a user a private message. This API can only be called using a user token.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to send a message to.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message body.',
                    'required' => true,
                ),
                array (
                    'name' => 'notify',
                    'type' => 'String',
                    'info' => 'Whether this message should trigger a user notification.',
                    'required' => false,
                ),
                array (
                    'name' => 'messageFormat',
                    'type' => 'String',
                    'info' => 'Determines how the message is treated by our server and rendered inside HipChat applications. One of: html, text.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getPhoto',
            'description' => 'Gets a user photo.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'size',
                    'type' => 'String',
                    'info' => 'The size to retrieve. One of: small, big.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updatePhoto',
            'description' => 'Update a user photo. A guest cannot be updated.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to update.',
                    'required' => true,
                ),
                array (
                    'name' => 'photo',
                    'type' => 'String',
                    'info' => 'The user photo as a base64 encoded string.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deletePhoto',
            'description' => 'Delete a user photo. A guest cannot be updated.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to update.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'shareFileWithUser',
            'description' => 'Share a file with another user.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrName',
                    'type' => 'String',
                    'info' => 'The id or email of user to send the file to.',
                    'required' => true,
                ),
                array (
                    'name' => 'file',
                    'type' => 'File',
                    'info' => 'File to share.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'shareLinkWithUser',
            'description' => 'Share a link with another user.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idOrName',
                    'type' => 'String',
                    'info' => 'The id or email of user to send the link to.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => false,
                ),
                array (
                    'name' => 'link',
                    'type' => 'String',
                    'info' => 'An absolute link to share.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoom',
            'description' => 'Get room details.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateRoom',
            'description' => 'Updates a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'privacy',
                    'type' => 'String',
                    'info' => 'Whether the room is available for access by other users or not. One of: public, private.',
                    'required' => true,
                ),
                array (
                    'name' => 'isArchived',
                    'type' => 'Boolean',
                    'info' => 'Whether the room should be archived or not.',
                    'required' => true,
                ),
                array (
                    'name' => 'isGuestAccessible',
                    'type' => 'Boolean',
                    'info' => 'Whether or not to enable guest access for this room.',
                    'required' => true,
                ),
                array (
                    'name' => 'topic',
                    'type' => 'String',
                    'info' => 'The new topic for the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'ownerId',
                    'type' => 'String',
                    'info' => 'User ID or email address of the room\'s owner.',
                    'required' => true,
                ),
                array (
                    'name' => 'delegateAdminVisibility',
                    'type' => 'Boolean',
                    'info' => 'Whether the room is visible to delegate admins.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoom',
            'description' => 'Deletes a room and kicks the current participants.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getAllRooms',
            'description' => 'List non archived rooms for this group.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'includePrivate',
                    'type' => 'Boolean',
                    'info' => 'Filter out private rooms.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeArchived',
                    'type' => 'Boolean',
                    'info' => 'Filter rooms.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'createRoom',
            'description' => 'Creates a new room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'privacy',
                    'type' => 'String',
                    'info' => 'Whether the room is available for access by other users or not. One of: public, private.',
                    'required' => false,
                ),
                array (
                    'name' => 'delegateAdminVisibility',
                    'type' => 'Boolean',
                    'info' => 'Whether the room is visible to delegate admins.',
                    'required' => false,
                ),
                array (
                    'name' => 'topic',
                    'type' => 'String',
                    'info' => 'The topic for the new room.',
                    'required' => false,
                ),
                array (
                    'name' => 'ownerUserId',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the room\'s owner.',
                    'required' => false,
                ),
                array (
                    'name' => 'guestAccess',
                    'type' => 'Boolean',
                    'info' => 'Whether or not to enable guest access for this room.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getRoomAction',
            'description' => 'Retrieve an action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomAction',
            'description' => 'Create an action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'targetOptions',
                    'type' => 'JSON',
                    'info' => 'JSON Object containing options which vary based on the type of target.',
                    'required' => false,
                ),
                array (
                    'name' => 'targetKey',
                    'type' => 'String',
                    'info' => 'The key of a dialog glance or web panel that should be opened in response to this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which the action appears in menu or list.',
                    'required' => false,
                ),
                array (
                    'name' => 'location',
                    'type' => 'String',
                    'info' => 'The location of this action. One of: hipchat.message.action, hipchat.input.action.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this action is shown.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'Localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The display name of the action.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomAction',
            'description' => 'Delete an action.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomDialog',
            'description' => 'Retrieve a dialog.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomDialog',
            'description' => 'Create a dialog.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The url where the dialog content is hosted.',
                    'required' => true,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this dialog. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsStyle',
                    'type' => 'String',
                    'info' => 'The dialog style. One of: normal, warning.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsHintI18n',
                    'type' => 'String',
                    'info' => 'Localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsHintValue',
                    'type' => 'String',
                    'info' => 'The dialog hint, default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsFilterPlaceholderI18n',
                    'type' => 'String',
                    'info' => 'Filter box placeholder text localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsFilterPlaceholderValue',
                    'type' => 'String',
                    'info' => 'filter box placeholder default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsPrimaryActionEnabled',
                    'type' => 'Boolean',
                    'info' => 'Whether button of primary action is disabled or enabled.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsPrimaryActionNameI18n',
                    'type' => 'String',
                    'info' => 'Primary action button localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsPrimaryActionNameValue',
                    'type' => 'String',
                    'info' => 'Primary action button default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsPrimaryActionKey',
                    'type' => 'String',
                    'info' => 'A key that can be used to register an event listener.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsSecondaryActions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of secondary actions of the dialog, rendered as link buttons.',
                    'required' => false,
                ),
                array (
                    'name' => 'optionsSizeWidth',
                    'type' => 'String',
                    'info' => 'The width of the dialog either in pixels px or as a percentage.',
                    'required' => true,
                ),
                array (
                    'name' => 'optionsSizeHeight',
                    'type' => 'String',
                    'info' => 'The height of the dialog either in pixels px or as a percentage.',
                    'required' => true,
                ),
                array (
                    'name' => 'titleI18n',
                    'type' => 'String',
                    'info' => 'The dialog title localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'titleValue',
                    'type' => 'String',
                    'info' => 'The dialog title default text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomDialog',
            'description' => 'Delete a dialog.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this dialog.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomExternalPage',
            'description' => 'Retrieve an external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomExternalPage',
            'description' => 'Create an external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL of the external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The display name of the external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'The optional localization key used to look up the localized value.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomExternalPage',
            'description' => 'Delete an external page.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this external page.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomGlance',
            'description' => 'Retrieve a glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomGlance',
            'description' => 'Create a glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'targetOptions',
                    'type' => 'JSON',
                    'info' => 'JSON Object of options which vary based on the type of target.',
                    'required' => false,
                ),
                array (
                    'name' => 'targetKey',
                    'type' => 'String',
                    'info' => 'The key of a dialog glance or web panel that should be opened in response to this action.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which glances appear. Glances are displayed top to bottom in order of ascending weight.',
                    'required' => false,
                ),
                array (
                    'name' => 'queryUrl',
                    'type' => 'String',
                    'info' => 'The URL of the resource providing the glance content.',
                    'required' => false,
                ),
                array (
                    'name' => 'iconUrl',
                    'type' => 'String',
                    'info' => 'Url for the icon to display on the left side of the glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'iconUrl2x',
                    'type' => 'String',
                    'info' => 'Url for the retina version of the icon to display on the left side of the glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this glance is shown.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'Display name of the glance localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'The display name of the glance default text.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomGlance',
            'description' => 'Delete a glance.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this glance.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomWebPanel',
            'description' => 'Retrieve a web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomWebPanel',
            'description' => 'Create a web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'nameI18n',
                    'type' => 'String',
                    'info' => 'Display name of the webPanel localization key used to look up the localized value.',
                    'required' => false,
                ),
                array (
                    'name' => 'nameValue',
                    'type' => 'String',
                    'info' => 'Display name of the webPanel default text.',
                    'required' => true,
                ),
                array (
                    'name' => 'weight',
                    'type' => 'Number',
                    'info' => 'Determines the order in which webPanel appear. Web panels are displayed top to bottom or left to right in order of ascending weight.',
                    'required' => false,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL of the resource providing the view content.',
                    'required' => true,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this webpanel. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'location',
                    'type' => 'String',
                    'info' => 'The location of this webPanel. One of: hipchat, sidebar, right.',
                    'required' => true,
                ),
                array (
                    'name' => 'conditions',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of conditions determine whether this web panel is shown.',
                    'required' => false,
                ),
                array (
                    'name' => 'iconUrl',
                    'type' => 'String',
                    'info' => 'Url for the icon to display on the left side of the webPanel title.',
                    'required' => true,
                ),
                array (
                    'name' => 'iconUrl2x',
                    'type' => 'String',
                    'info' => 'Url for the retina version of the icon to display on the left side of the webPanel title.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomWebPanel',
            'description' => 'Delete a web panel.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this web panel.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomWebhook',
            'description' => 'Retrieve a webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createRoomWebhook',
            'description' => 'Create a webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'The label for this webhook.',
                    'required' => false,
                ),
                array (
                    'name' => 'url',
                    'type' => 'String',
                    'info' => 'The URL to send the webhook POST to.',
                    'required' => true,
                ),
                array (
                    'name' => 'pattern',
                    'type' => 'String',
                    'info' => 'The regular expression pattern to match against messages Only applicable for message events.',
                    'required' => false,
                ),
                array (
                    'name' => 'authentication',
                    'type' => 'String',
                    'info' => 'The authentication method for this webhook. One of: jwt, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'event',
                    'type' => 'String',
                    'info' => 'The event to listen for. One of: room_archived, room_created, room_deleted, room_enter, room_exit, room_file_upload, room_message, room_notification, room_topic_change, room_unarchived.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteRoomWebhook',
            'description' => 'Delete a webhook.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'key',
                    'type' => 'String',
                    'info' => 'Unique key to identify this webhook.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomMessage',
            'description' => 'Fetch one specific message by id.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'messageId',
                    'type' => 'String',
                    'info' => 'The id of the message to retrieve.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone. Must be a supported timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getRoomHistory',
            'description' => 'Fetch chat history for this room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of messages to return. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'reverse',
                    'type' => 'Boolean',
                    'info' => 'Reverse the output such that the oldest message is first.',
                    'required' => false,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The offset for the messages to return.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
                array (
                    'name' => 'date',
                    'type' => 'String',
                    'info' => 'Either the latest date to fetch history for in ISO-8601 format.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'endDate',
                    'type' => 'String',
                    'info' => 'Either the earliest date to fetch history for the ISO-8601 format.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getRecentRoomHistory',
            'description' => 'Fetch latest chat history for this room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of messages to return. In range: 0-1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'timezone',
                    'type' => 'String',
                    'info' => 'Your timezone.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeDeleted',
                    'type' => 'Boolean',
                    'info' => 'Include records about deleted messages into results.',
                    'required' => false,
                ),
                array (
                    'name' => 'notBefore',
                    'type' => 'String',
                    'info' => 'The id of the message that is oldest in the set of messages to be returned.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'inviteUserToRoom',
            'description' => 'Invite a user to a public room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userIdOrEmail',
                    'type' => 'String',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user to invite.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'reason',
                    'type' => 'String',
                    'info' => 'The reason to give to the invited user.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'addMemberToRoom',
            'description' => 'Adds a member to a private room and sends member\'s unavailable presence to all room members asynchronously.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userIdOrEmail',
                    'type' => 'Number',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomRoles',
                    'type' => 'Array',
                    'info' => 'Array of Strings. List of roles for the user within the room.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'removeMemberFromRoom',
            'description' => 'Removes a member from a private room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'userIdOrEmail',
                    'type' => 'Number',
                    'info' => 'The id, email address, or mention name (beginning with an @) of the user.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomAllMembers',
            'description' => 'Gets all members for this private room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'sendMessageToRoom',
            'description' => 'Send a message to a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'sendRoomNotification',
            'description' => 'Send a message to a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'from',
                    'type' => 'String',
                    'info' => 'A label to be shown in addition to the sender\'s name.',
                    'required' => false,
                ),
                array (
                    'name' => 'messageFormat',
                    'type' => 'String',
                    'info' => 'Determines how the message is treated by our server and rendered inside HipChat applications.',
                    'required' => false,
                ),
                array (
                    'name' => 'color',
                    'type' => 'String',
                    'info' => 'Background color for message. One of: yellow, green, red, purple, gray, random.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachTo',
                    'type' => 'String',
                    'info' => 'The message id to to attach this notification to, for example if this notification is in response to a particular message.',
                    'required' => false,
                ),
                array (
                    'name' => 'notify',
                    'type' => 'String',
                    'info' => 'Whether this message should trigger a user notification.',
                    'required' => false,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message body.',
                    'required' => true,
                ),
                array (
                    'name' => 'cardStyle',
                    'type' => 'String',
                    'info' => 'Type of the card. One of: file, image, application, link, media.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardDescriptionValue',
                    'type' => 'String',
                    'info' => 'Card description in the specific format.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardDescriptionFormat',
                    'type' => 'String',
                    'info' => 'Card description format that can be html or text.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardFormat',
                    'type' => 'String',
                    'info' => 'Application cards can be compact 1 to 2 lines or medium 1 to 5 lines.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardUrl',
                    'type' => 'String',
                    'info' => 'The url where the card will open.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardTitle',
                    'type' => 'String',
                    'info' => 'Card title of the card.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardThumbnailUrl',
                    'type' => 'String',
                    'info' => 'The thumbnail url.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardThumbnailWidth',
                    'type' => 'Number',
                    'info' => 'The original width of the image.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardThumbnailUrl2x',
                    'type' => 'String',
                    'info' => 'The thumbnail url in retina.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardThumbnailHeight',
                    'type' => 'Number',
                    'info' => 'The original height of the image.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardActivityHtml',
                    'type' => 'String',
                    'info' => 'Html for the activity to show in one line a summary of the action that happened.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardActivityIconUrl',
                    'type' => 'String',
                    'info' => 'The url where the icon is.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardActivityIconUrl2x',
                    'type' => 'String',
                    'info' => 'The url for the icon in retina.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardAttributes',
                    'type' => 'Array',
                    'info' => 'Array of JSON objects of list of attributes to show below the card.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardId',
                    'type' => 'String',
                    'info' => 'An id that will help HipChat recognise the same card when it is sent multiple times.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardIconUrl',
                    'type' => 'String',
                    'info' => 'The url where the card icon is.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardIconUrl2x',
                    'type' => 'String',
                    'info' => 'The url for the card icon in retina.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getRoomtAllParticipants',
            'description' => 'Gets all participants in this room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'includeOffline',
                    'type' => 'String',
                    'info' => 'Filter users by status boolean.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'replyToMessageInRoom',
            'description' => 'Reply to a message in a room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'parentMessageId',
                    'type' => 'String',
                    'info' => 'The id of the message you are replying to.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'shareFileWithRoom',
            'description' => 'Share a file with the room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'file',
                    'type' => 'File',
                    'info' => 'File to share.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'shareLinkWithRoom',
            'description' => 'Share a link with the room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'message',
                    'type' => 'String',
                    'info' => 'The message.',
                    'required' => false,
                ),
                array (
                    'name' => 'link',
                    'type' => 'String',
                    'info' => 'An absolute link to share.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomStatistics',
            'description' => 'Fetch statistics for this room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'setRoomTopic',
            'description' => 'Set a room\'s topic. Useful for displaying statistics, important links, server status, you name it.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'topic',
                    'type' => 'String',
                    'info' => 'The topic body.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getRoomAllWebhooks',
            'description' => 'Gets all webhooks for this room.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'roomIdOrName',
                    'type' => 'String',
                    'info' => 'The id or url encoded name of the room.',
                    'required' => true,
                ),
                array (
                    'name' => 'startIndex',
                    'type' => 'Number',
                    'info' => 'The start index for the result set.',
                    'required' => false,
                ),
                array (
                    'name' => 'maxResults',
                    'type' => 'Number',
                    'info' => 'The maximum number of results. In range: 0-1000.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getSession',
            'description' => 'Gets the OAuth session via its associated access_token.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'The OAuth accessToken.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteSession',
            'description' => 'Deletes the OAuth session via its associated access_token Authentication required Accessible by group clients room clients users.',
            'args' => array (
                array (
                    'name' => 'authToken',
                    'type' => 'String',
                    'info' => 'API access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'The OAuth accessToken.',
                    'required' => true,
                ),
            ),
        ),
    ),
    'custom' => array (
        'getAccessToken' => array (
            'dictionary' => array (
                'code' => 'code',
                'userId' => 'userId',
                'clientName' => 'clientName',
                'redirectUri' => 'redirectUri',
                'scope' => 'scope',
                'groupId' => 'groupId',
            ),
            'vendorUrl' => 'https://api.coinbase.com/oauth/token',
            'method' => 'POST-RAW',
            'custom' => true,
        ),
        'getCapabilities' => array (
            'dictionary' => array (
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/capabilities',
            'method' => 'GET',
        ),
        'getAddonCapabilitiesSchema' => array (
            'dictionary' => array (
                'draft' => 'draft',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/capabilities/addon/schema',
            'method' => 'GET',
        ),
        'getEmoticon' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'emoticonIdOrKey' => 'emoticonIdOrKey',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/emoticon/{{emoticonIdOrKey}}',
            'method' => 'GET',
        ),
        'getAllEmoticons' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
                'type' => 'type',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/emoticon',
            'method' => 'GET',
        ),
        'getGlobalAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/action/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'targetOptions' => 'targetOptions',
                'targetKey' => 'targetKey',
                'weight' => 'weight',
                'location' => 'location',
                'conditions' => 'conditions',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/action/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGlobalAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/action/{{key}}',
            'method' => 'DELETE',
        ),
        'getGlobalDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/dialog/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'url' => 'url',
                'authentication' => 'authentication',
                'optionsStyle' => 'optionsStyle',
                'optionsHintI18n' => 'optionsHintI18n',
                'optionsHintValue' => 'optionsHintValue',
                'optionsFilterPlaceholderI18n' => 'optionsFilterPlaceholderI18n',
                'optionsFilterPlaceholderValue' => 'optionsFilterPlaceholderValue',
                'optionsPrimaryActionEnabled' => 'optionsPrimaryActionEnabled',
                'optionsPrimaryActionNameI18n' => 'optionsPrimaryActionNameI18n',
                'optionsPrimaryActionNameValue' => 'optionsPrimaryActionNameValue',
                'optionsPrimaryActionKey' => 'optionsPrimaryActionKey',
                'optionsSecondaryActions' => 'optionsSecondaryActions',
                'optionsSizeWidth' => 'optionsSizeWidth',
                'optionsSizeHeight' => 'optionsSizeHeight',
                'titleI18n' => 'titleI18n',
                'titleValue' => 'titleValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/dialog/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGlobalDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/dialog/{{key}}',
            'method' => 'DELETE',
        ),
        'getGlobalExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/externalPage/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'url' => 'url',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/externalPage/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGlobalExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/externalPage/{{key}}',
            'method' => 'DELETE',
        ),
        'getGlobalGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/glance/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'targetOptions' => 'targetOptions',
                'targetKey' => 'targetKey',
                'weight' => 'weight',
                'queryUrl' => 'queryUrl',
                'iconUrl' => 'iconUrl',
                'iconUrl2x' => 'iconUrl2x',
                'conditions' => 'conditions',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/glance/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGlobalGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/glance/{{key}}',
            'method' => 'DELETE',
        ),
        'getGlobalWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webPanel/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
                'weight' => 'weight',
                'url' => 'url',
                'authentication' => 'authentication',
                'location' => 'location',
                'conditions' => 'conditions',
                'iconUrl' => 'iconUrl',
                'iconUrl2x' => 'iconUrl2x',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webPanel/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGlobalWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webPanel/{{key}}',
            'method' => 'DELETE',
        ),
        'getGlobalWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webhook/{{key}}',
            'method' => 'GET',
        ),
        'createGlobalWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'name' => 'name',
                'url' => 'url',
                'pattern' => 'pattern',
                'authentication' => 'authentication',
                'event' => 'event',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webhook/{{key}}',
            'method' => 'PUT',
        ),
        'deleteGlobalWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/extension/webhook/{{key}}',
            'method' => 'DELETE',
        ),
        'getGroup' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'groupId' => 'groupId',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/group/{{groupId}}',
            'method' => 'GET',
        ),
        'getGroupAvatar' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'groupId' => 'groupId',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/group/{{groupId}}/avatar',
            'method' => 'GET',
        ),
        'updateGroupAvatar' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'groupId' => 'groupId',
                'avatar' => 'avatar',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/group/{{groupId}}/avatar',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteGroupAvatar' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'groupId' => 'groupId',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/group/{{groupId}}/avatar',
            'method' => 'DELETE',
        ),
        'getGroupStatistics' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'groupId' => 'groupId',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/group/{{groupId}}/statistics',
            'method' => 'GET',
        ),
        'getIntegrationInstallableData' => array (
            'dictionary' => array (
                'token' => 'token',
                'integrationIdOrKey' => 'integrationIdOrKey',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/{{integrationIdOrKey}}/installable/{{token}}',
            'method' => 'GET',
        ),
        'invokeIntegrationLink' => array (
            'dictionary' => array (
                'token' => 'token',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/link/{{token}}',
            'method' => 'GET',
        ),
        'deleteIntegrationLink' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'token' => 'token',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/link/{{token}}',
            'method' => 'DELETE',
        ),
        'createIntegrationLink' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'target' => 'target',
                'ttl' => 'ttl',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/link',
            'method' => 'POST',
        ),
        'pushUIChangesToGroup' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'glance' => 'glance',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/ui',
            'method' => 'POST',
        ),
        'pushUIChangesToRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'glance' => 'glance',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/ui/room/{{roomIdOrName}}',
            'method' => 'POST',
        ),
        'pushUIChangesToUserInRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'userIdOrEmail' => 'userIdOrEmail',
                'roomIdOrName' => 'roomIdOrName',
                'glance' => 'glance',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/ui/room/{{roomIdOrName}}/user/{{userIdOrEmail}}',
            'method' => 'POST',
        ),
        'pushUIChangesToUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'userIdOrName' => 'userIdOrName',
                'glance' => 'glance',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/addon/ui/user/{{userIdOrName}}',
            'method' => 'POST',
        ),
        'inviteUserToGroup' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'title' => 'title',
                'email' => 'email',
                'name' => 'name',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/invite/user',
            'method' => 'POST',
        ),
        'getAutoJoinRooms' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/preference/auto-join',
            'method' => 'GET',
        ),
        'getAllUsers' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
                'includeGuests' => 'include-guests',
                'includeDeleted' => 'include-deleted',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user',
            'method' => 'GET',
        ),
        'createUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'name' => 'name',
                'roles' => 'roles',
                'title' => 'title',
                'mentionName' => 'mention_name',
                'isGroupAdmin' => 'is_group_admin',
                'timezone' => 'timezone',
                'password' => 'password',
                'email' => 'email',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user',
            'method' => 'POST',
        ),
        'getUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}',
            'method' => 'GET',
        ),
        'updateUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'name' => 'name',
                'roles' => 'roles',
                'title' => 'title',
                'presenceStatus' => 'presenceStatus',
                'presenceShow' => 'presenceShow',
                'mentionName' => 'mention_name',
                'isGroupAdmin' => 'is_group_admin',
                'timezone' => 'timezone',
                'password' => 'password',
                'email' => 'email',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}',
            'method' => 'DELETE',
        ),
        'getPrivatechatMessage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'messageId' => 'messageId',
                'idOrName' => 'idOrName',
                'timezone' => 'timezone',
                'includeDeleted' => 'include_deleted',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrName}}/history/{{messageId}}',
            'method' => 'GET',
        ),
        'getPrivatechatHistory' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'maxResults' => 'max-results',
                'reverse' => 'reverse',
                'startIndex' => 'start-index',
                'includeDeleted' => 'include_deleted',
                'date' => 'date',
                'timezone' => 'timezone',
                'endDate' => 'end-date',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/history',
            'method' => 'GET',
        ),
        'getRecentPrivatechatHistory' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'maxResults' => 'max-results',
                'timezone' => 'timezone',
                'includeDeleted' => 'include_deleted',
                'notBefore' => 'not-before',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/history/latest',
            'method' => 'GET',
        ),
        'sendPrivateMessage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'message' => 'message',
                'notify' => 'notify',
                'messageFormat' => 'message_format',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/message',
            'method' => 'POST',
        ),
        'getPhoto' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'size' => 'size',
                'idOrEmail' => 'idOrEmail',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/photo/{{size}}',
            'method' => 'GET',
        ),
        'updatePhoto' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
                'photo' => 'photo',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/photo',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deletePhoto' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrEmail' => 'idOrEmail',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrEmail}}/photo',
            'method' => 'DELETE',
        ),
        'shareFileWithUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrName' => 'idOrName',
                'file' => 'file',
                'message' => 'message',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrName}}/share/file',
            'method' => 'POST-RAW',
            'custom' => true,
        ),
        'shareLinkWithUser' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'idOrName' => 'idOrName',
                'message' => 'message',
                'link' => 'link',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/user/{{idOrName}}/share/link',
            'method' => 'POST',
        ),
        'getRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}',
            'method' => 'GET',
        ),
        'updateRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'name' => 'name',
                'privacy' => 'privacy',
                'isArchived' => 'is_archived',
                'isGuestAccessible' => 'is_guest_accessible',
                'topic' => 'topic',
                'ownerId' => 'ownerId',
                'delegateAdminVisibility' => 'delegate_admin_visibility',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}',
            'method' => 'DELETE',
        ),
        'getAllRooms' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
                'includePrivate' => 'include-private',
                'includeArchived' => 'include-archived',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room',
            'method' => 'GET',
        ),
        'createRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'name' => 'name',
                'privacy' => 'privacy',
                'delegateAdminVisibility' => 'delegate_admin_visibility',
                'topic' => 'topic',
                'ownerUserId' => 'owner_user_id',
                'guestAccess' => 'guest_access',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room',
            'method' => 'POST',
        ),
        'getRoomAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/action/{{key}}',
            'method' => 'GET',
        ),
        'createRoomAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'targetOptions' => 'targetOptions',
                'targetKey' => 'targetKey',
                'weight' => 'weight',
                'location' => 'location',
                'conditions' => 'conditions',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/action/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoomAction' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/action/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/dialog/{{key}}',
            'method' => 'GET',
        ),
        'createRoomDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'url' => 'url',
                'authentication' => 'authentication',
                'optionsStyle' => 'optionsStyle',
                'optionsHintI18n' => 'optionsHintI18n',
                'optionsHintValue' => 'optionsHintValue',
                'optionsFilterPlaceholderI18n' => 'optionsFilterPlaceholderI18n',
                'optionsFilterPlaceholderValue' => 'optionsFilterPlaceholderValue',
                'optionsPrimaryActionEnabled' => 'optionsPrimaryActionEnabled',
                'optionsPrimaryActionNameI18n' => 'optionsPrimaryActionNameI18n',
                'optionsPrimaryActionNameValue' => 'optionsPrimaryActionNameValue',
                'optionsPrimaryActionKey' => 'optionsPrimaryActionKey',
                'optionsSecondaryActions' => 'optionsSecondaryActions',
                'optionsSizeWidth' => 'optionsSizeWidth',
                'optionsSizeHeight' => 'optionsSizeHeight',
                'titleI18n' => 'titleI18n',
                'titleValue' => 'titleValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/dialog/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoomDialog' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/dialog/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/externalPage/{{key}}',
            'method' => 'GET',
        ),
        'createRoomExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'url' => 'url',
                'nameValue' => 'nameValue',
                'nameI18n' => 'nameI18n',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/externalPage/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoomExternalPage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/externalPage/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/glance/{{key}}',
            'method' => 'GET',
        ),
        'createRoomGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'targetOptions' => 'targetOptions',
                'targetKey' => 'targetKey',
                'weight' => 'weight',
                'queryUrl' => 'queryUrl',
                'iconUrl' => 'iconUrl',
                'iconUrl2x' => 'iconUrl2x',
                'conditions' => 'conditions',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/glance/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoomGlance' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/glance/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webPanel/{{key}}',
            'method' => 'GET',
        ),
        'createRoomWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'nameI18n' => 'nameI18n',
                'nameValue' => 'nameValue',
                'weight' => 'weight',
                'url' => 'url',
                'authentication' => 'authentication',
                'location' => 'location',
                'conditions' => 'conditions',
                'iconUrl' => 'iconUrl',
                'iconUrl2x' => 'iconUrl2x',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webPanel/{{key}}',
            'method' => 'PUT',
            'custom' => true,
        ),
        'deleteRoomWebPanel' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webPanel/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webhook/{{key}}',
            'method' => 'GET',
        ),
        'createRoomWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
                'name' => 'name',
                'url' => 'url',
                'pattern' => 'pattern',
                'authentication' => 'authentication',
                'event' => 'event',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webhook/{{key}}',
            'method' => 'PUT',
        ),
        'deleteRoomWebhook' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'key' => 'key',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/extension/webhook/{{key}}',
            'method' => 'DELETE',
        ),
        'getRoomMessage' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'messageId' => 'messageId',
                'roomIdOrName' => 'roomIdOrName',
                'timezone' => 'timezone',
                'includeDeleted' => 'include_deleted',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/history/{{messageId}}',
            'method' => 'GET',
        ),
        'getRoomHistory' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'maxResults' => 'max-results',
                'reverse' => 'reverse',
                'startIndex' => 'start-index',
                'includeDeleted' => 'include_deleted',
                'date' => 'date',
                'timezone' => 'timezone',
                'endDate' => 'end-date',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/history',
            'method' => 'GET',
        ),
        'getRecentRoomHistory' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'maxResults' => 'max-results',
                'timezone' => 'timezone',
                'includeDeleted' => 'include_deleted',
                'notBefore' => 'not-before',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/history/latest',
            'method' => 'GET',
        ),
        'inviteUserToRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'userIdOrEmail' => 'userIdOrEmail',
                'roomIdOrName' => 'roomIdOrName',
                'reason' => 'reason',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/invite/{{userIdOrEmail}}',
            'method' => 'POST',
        ),
        'addMemberToRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'userIdOrEmail' => 'userIdOrEmail',
                'roomIdOrName' => 'roomIdOrName',
                'roomRoles' => 'room_roles',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/member/{{userIdOrEmail}}',
            'method' => 'PUT',
        ),
        'removeMemberFromRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'userIdOrEmail' => 'userIdOrEmail',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/member/{{userIdOrEmail}}',
            'method' => 'DELETE',
        ),
        'getRoomAllMembers' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/member',
            'method' => 'GET',
        ),
        'sendMessageToRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'message' => 'message',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/message',
            'method' => 'POST',
        ),
        'sendRoomNotification' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'from' => 'from',
                'messageFormat' => 'messageFormat',
                'color' => 'color',
                'attachTo' => 'attachTo',
                'notify' => 'notify',
                'message' => 'message',
                'cardStyle' => 'cardStyle',
                'cardDescriptionValue' => 'cardDescriptionValue',
                'cardDescriptionFormat' => 'cardDescriptionFormat',
                'cardFormat' => 'cardFormat',
                'cardUrl' => 'cardUrl',
                'cardTitle' => 'cardTitle',
                'cardThumbnailUrl' => 'cardThumbnailUrl',
                'cardThumbnailWidth' => 'cardThumbnailWidth',
                'cardThumbnailUrl2x' => 'cardThumbnailUrl2x',
                'cardThumbnailHeight' => 'cardThumbnailHeight',
                'cardActivityHtml' => 'cardActivityHtml',
                'cardActivityIconUrl' => 'cardActivityIconUrl',
                'cardActivityIconUrl2x' => 'cardActivityIconUrl2x',
                'cardAttributes' => 'cardAttributes',
                'cardId' => 'cardId',
                'cardIconUrl' => 'cardIconUrl',
                'cardIconUrl2x' => 'cardIconUrl2x',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/notification',
            'method' => 'POST',
            'custom' => true,
        ),
        'getRoomtAllParticipants' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'startIndex' => 'start-index',
                'includeOffline' => 'include-offline',
                'maxResults' => 'max-results',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/participant',
            'method' => 'GET',
        ),
        'replyToMessageInRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'parentMessageId' => 'parentMessageId',
                'message' => 'message',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/reply',
            'method' => 'POST',
        ),
        'shareFileWithRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'file' => 'file',
                'message' => 'message',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/share/file',
            'method' => 'POST-RAW',
            'custom' => true,
        ),
        'shareLinkWithRoom' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'message' => 'message',
                'link' => 'link',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/share/link',
            'method' => 'POST',
        ),
        'getRoomStatistics' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/statistics',
            'method' => 'GET',
        ),
        'setRoomTopic' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'topic' => 'topic',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/topic',
            'method' => 'PUT',
        ),
        'getRoomAllWebhooks' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'roomIdOrName' => 'roomIdOrName',
                'startIndex' => 'start-index',
                'maxResults' => 'max-results',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/room/{{roomIdOrName}}/webhook',
            'method' => 'GET',
        ),
        'getSession' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'accessToken' => 'accessToken',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/oauth/token/{{accessToken}}',
            'method' => 'GET',
        ),
        'deleteSession' => array (
            'dictionary' => array (
                'authToken' => 'authToken',
                'accessToken' => 'accessToken',
            ),
            'vendorUrl' => 'https://api.hipchat.com/v2/oauth/token/{{accessToken}}',
            'method' => 'DELETE',
        ),
    ),
);